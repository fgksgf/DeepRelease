id,abstract,article
microsoft/terminal_3391,key bindings now support arguments ; check the default settings for some examples of how this works,"add support for arbitrary args in keybindings [sep] enables the user to provide arbitrary argument values to shortcut actions through a new args member of keybindings . for some keybindings , like newtabwithprofile < n > , we previously needed 0 different shortcutactions , one for each value of index . if a user wanted to have a newtabwithprofile11 keybinding , that was simply impossible . now that the args are in their own separate json object , each binding can accept any number of arbitrary argument values . so instead of : . { `` command '' : `` newtab '' , `` keys '' : [ `` ctrl+shift+t '' ] } , . { `` command '' : `` newtabprofile0 '' , `` keys '' : [ `` ctrl+shift+1 '' ] } , . { `` command '' : `` newtabprofile1 '' , `` keys '' : [ `` ctrl+shift+2 '' ] } , . { `` command '' : `` newtabprofile2 '' , `` keys '' : [ `` ctrl+shift+3 '' ] } , . { `` command '' : `` newtabprofile3 '' , `` keys '' : [ `` ctrl+shift+4 '' ] } , . we can now use : . { `` command '' : `` newtab '' , `` keys '' : [ `` ctrl+shift+t '' ] } , . { `` command '' : { `` action '' : `` newtab '' , `` index '' : 0 } , `` keys '' : [ `` ctrl+shift+1 '' ] } , . { `` command '' : { `` action '' : `` newtab '' , `` index '' : 0 } , `` keys '' : [ `` ctrl+shift+2 '' ] } , . { `` command '' : { `` action '' : `` newtab '' , `` index '' : 0 } , `` keys '' : [ `` ctrl+shift+3 '' ] } , . initially , this does seem more verbose . however , for cases where there are multiple args , or there 's a large range of values for the args , this will quickly become a more powerful system of expressing keybindings . the `` legacy '' keybindings are left in in this pr . they have helper methods to generate appropriate iactionargs values . prior to releasing 1.0 , i think we should remove them , if only to remove some code bloat . see the spec for more details . i work here . ran tests . removed the legacy keybindings from the defaults.json , everything still works . tried leaving the legacy keybingings in my profiles.json , everything still works . [sep] this is a start , but there 's a weird linker bug if i take the setkeybinding ( shortcutaction , keychord ) implementation out , which i do n't totally understand.a good old-fashioned clean will fix that right up.all these things work.hey this actually _functionally_ works.mostly cleanup and completion of implementation.hey i bet we could just make newtab the handler for newtabwithprofile.start writing tests for keybinding args.add tests.revert a bad sln change , and clean out dead code.merge branch 'master ' into dev/migrie/f/1142-arbitrary-args.area-settings.product-terminal ."
ruby-grape/grape_936,fixed default params processing for optional groups,"fix weird behaviour for optional groups with default params [sep] apply defaults for inner params only if parent param is present . [sep] fix weird behaviour for optional groups with default params , apply defaults for inner params only if parent param is present ."
microsoft/terminal_5319,the box cursors should now more accurately represent double-width glyphs,"show a double width cursor for double width characters [sep] this pr will allow the cursor to be double width when on top of a double width character . this required changing iscursordoublewidth to check whether the glyph the cursor 's on top of is double width . the ones that seemed to be relevant/repro-able , i attempt to address in this pr . the iscursordoublewidth check would fail during the textbuffer : :reflow call inside of terminal : :userresize occasionally , particularly when newcursor.enddeferdrawing ( ) is called . this is because when we tell the newcursor to enddefer , the renderer will attempt to redraw the cursor . as part of this redraw , it 'll ask if iscursordoublewidth , and if the renderer managed to ask this before userresize swapped out the old buffer with the new one from reflow , the renderer will be asking the old buffer if its out-of-bounds cursor is double width . this was pretty easily repro 'd using cmatrix -u0 and resizing the window like a madman . as a solution , i 've moved the start/end deferdrawing calls out of reflow and into userresize . this way , i can `` clamp '' the portion of the code where the newbuffer is getting created and reflowed and swapped into the terminal buffer , and only allow the renderer to draw once the swap is done . this also means that conhost 's resizewithreflow needed to change slightly . in addition , i 've added a writelock to setcursoron . cla signed . manual validation that the cursor is indeed chonky , added a test case to check that we are correctly saying that the cursor is double width ( not too sure if i put it in the right place ) . also open to other test case ideas and thoughts on what else i should be careful for since i am quite nervous about what other crashes might occur . [sep] first lets add back the code that crashes.adding a test that may or may not work.test case.i just add debug for now.merge branch 'master ' into dev/lelian/bigcursor.maybe.ridding myself of comments.y fail if it would n't matter hmm.why do n't we just take these calls and place them over here.merge branch 'master ' into dev/lelian/bigcursor.area-terminalcontrol.automerge.product-terminal ."
traefik/traefik_4617,prepare release version,prepare release version [sep] ? prepare release version . aka faisselle ( temporary name ) . create a new release . [sep] chore : update codename .. doc : update changelog .. area/documentation.size/m .
apache/incubator-mxnet_14483,reenable the test,"reenable the test_kvstore_gpu.test_rsp_push_pull [sep] ran 10k with latest mxnet code . total 0 0 0 0 20 % . [ success ] 100.00 % test_kvstore_gpu.test_rsp_push_pull : 22578.5869s . sha . ran 0 test in 22578.592s . ok . also test with seed sha ( module seed 1829754103 ) , seed sha ( module seed 1032824746 ) , all passed . please feel free to remove inapplicable items for your pr . the pr title starts with [ mxnet- $ jira_id ] , where $ jira_id refers to the relevant jira issue created ( except prs with tiny changes ) . ) . : . unit tests are added for small changes to verify correctness ( e.g . adding a new operator ) . nightly tests are added for complicated/long-running ones ( e.g . changing distributed kvstore ) . build tests will be added for build configuration changes ( e.g . adding a new build option with nccl ) . : . for user-facing api changes , api doc string has been updated . for new c++ functions in header files , their functionalities and arguments are documented . for new examples , readme.md is added to explain the what the example does , the source of the dataset , expected performance on test set and reference to the original paper if applicable . to the my best knowledge , examples are either not affected by this change , or have been fixed to be compatible with this change . [sep] reenable the test.test.pr-awaiting-merge ."
MarlinFirmware/Marlin_20801,fix trigorilla pro stop pins,"fix trigorilla pro stop pins [sep] in pins_trigorilla_pro.h is . define x_max_pin pg10 . define y_max_pin pa12 . this seem to be have been hard coded to max for the anycubic predator ( delta ) . renamed to more useful . define x_stop_pin pg10 . define y_stop_pin pa12 . so marlin can move them to min or max as needed . this is a requirement before releasing configuration files for newer anycubic i3 mega machines that ship with or are upgraded to the trigorilla_pro controller . trigorilla_pro controller . controller board can be used for more than just delta 's . see mammoth 0 hour ( and on going ) session trying to talk ibbu1426 though setting up his anycubic i3 mega with trigorilla_pro on discord . ( almost there ) . [sep] rename single endstops as stop , not min or max.c : boards/pins.pr : coding standards ."
xamarin/Xamarin.Forms_1301,update cecil to 0.10-b7,"[ xamlc ] update cecil to 0.10-b7 [sep] [ xamlc ] update cecil to 0.10-b7 . bugs fixed . / . / . behavioral changes . / . has tests ( if omitted , state reason in description ) . rebased on top of master at time of pr . changes adhere to coding standard . consolidate commits as makes sense . [sep] [ xamlc ] update cecil to 0.10-b7 ."
ReactiveX/RxJava_5760,"` subject ` / ` flowableprocessor ` npe fixes , add ` unicastprocessor ` tck .","2.x : subject npe fixes , add unicastprocessor tck [sep] this pr adds the subject.refcount ( ) and flowableprocessor.refcount ( ) that capture the upstream 's disposable/subscription and disposes/cancels them if the number of observers/subscribers decreases to zero . the reactive-streams tck and thus other implementations may expect such behavior from a processor implementation and this wrapper is required to pass the tck tests . while implementing the tck tests , it turned out the null-handling of the subjects and flowableprocessors were not following the reactive-streams specification . they have to throw a nullpointerexception immediately and not turn them into npes for the downstream . these classes and the tests have been fixed as well . their error messages have been uniformed too . [sep] 2.x : add subject/processor refcount ( ) , subject npe fixes.fix wording.move refcountprocessor into tests.improve style.2.x.bug.enhancement ."
